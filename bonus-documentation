*** FT_PRINTF BONUS ***


Things to accomplish:
- Manage any combination of the following flags: '-0.' and the field minimum width under all conversions.
- Manage all the following flags: '# +' (one is a space).

------------------------------------------------------------------------------------------------------------------------------------------

- <stdio.h> printf format:
%[$][flags][width][.precision][length modifier]conversion

flags come strictly before the optional minimum field width.

-------------------------------------------------------------------------------------------------------------------------------------------

What is the flags' behaviour:
'#' The value should be converted to an "alternate form". For x and X conversions, a nonzero result 
	has the string "0x" (or "0X" for X conversions) prepended to it.

'0' The value should be zero padded. For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions, 
	the converted value is padded on the left with zeros rather than blanks.  If the 0 and - flags 
	both appear, the 0 flag is ignored. If a precision is given with a numeric conversion 
	(d, i, o, u, x,  and  X),  the  0 flag is ignored. For other conversions, the behavior is undefined.

'-' The converted value is to be left adjusted on the field boundary.  (The default is right justification.)  
	The converted value is padded on the right with blanks, rather than on the left with blanks or zeros.  
	A - overrides a 0 if both are given.

' ' (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.

'+' A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default, a sign 
	is used only for negative numbers.  A +  overrides a space if both are used.

'.' For decimal conversion (i, d, u, f, F, g, G) the output is to be grouped with thousands' grouping characters 
	if the locale information indicates any. (See Setlocale (3)). Note that many versions of gcc(1) cannot parse 
	this option and will issue a warning. 


Field Width:
	An  optional  decimal digit string (with nonzero first digit) specifying a minimum field width.  
	If the converted value has fewer characters than the field width, it will be padded with spaces 
	on the left (or right, if the left-adjustment flag has been given).  Instead of a decimal digit 
	string one may write  "*"  or  "*m$" (for  some  decimal integer m) to specify that the field width 
	is given in the next argument, or in the m-th argument, respectively, which must be of type int.  A
    negative field width is taken as a '-' flag followed by a positive field width.  In no case does a 
	nonexistent or small field width cause truncation of  a  field; if the result of a conversion is wider 
	than the field width, the field is expanded to contain the conversion result.

-------------------------------------------------------------------------------------------------------------------------------------------

What needs to be done for every case:
'#' Prepend '0x' at the beggining of %x and %X if they are not 0.

' ' Add a space before %d and %i if they are positive or 0.

'+' Add a + sign before %d and %i if they are positive or 0. '+' overrides ' ' when used together.
-------
'-' Add spaces on the right side until it reaches specified width. If no width specified don't add spaces.
	If converted value width is bigger or equal to specified field width, don't truncate.
	'-' overrides '0' when used together. For ALL conversions.

'0' Add 0 on the left side until it reaches specified width. If no width specified don't add 0.
	If converted value width is bigger or equal to specified field width, don't truncate.
	'0' flag is ignored when used with '-' flag. For %d %i %u %x %X conversions.

'.' ... For %i %d %u conversions.

----------

Combinations and behaviour:
'+' and '-'
'+' and '0'
...
	
	






