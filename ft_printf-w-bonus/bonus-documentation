*** FT_PRINTF BONUS ***


Things to accomplish:
- Manage any combination of the following flags: '-0.' and the field minimum width under all conversions.
- Manage all the following flags: '# +' (one is a space).

------------------------------------------------------------------------------------------------------------------------------------------

- <stdio.h> printf format:
%[$][flags][width][.precision][length modifier]conversion

flags come strictly before the optional minimum field width.

-------------------------------------------------------------------------------------------------------------------------------------------

What is the flags' behaviour:
'#' The value should be converted to an "alternate form". For x and X conversions, a nonzero result
	has the string "0x" (or "0X" for X conversions) prepended to it.

'0' The value should be zero padded. For d, i, o, u, x, X, a, A, e, E, f, F, g, and G conversions,
	the converted value is padded on the left with zeros rather than blanks.  If the 0 and - flags
	both appear, the 0 flag is ignored. If a precision is given with a numeric conversion
	(d, i, o, u, x,  and  X),  the  0 flag is ignored. For other conversions, the behavior is undefined.

'-' The converted value is to be left adjusted on the field boundary.  (The default is right justification.)
	The converted value is padded on the right with blanks, rather than on the left with blanks or zeros.
	A - overrides a 0 if both are given.

' ' (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.

'+' A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default, a sign
	is used only for negative numbers.  A '+'  overrides a space if both are used.

Field Width:
	An  optional  decimal digit string (with nonzero first digit) specifying a minimum field width.
	If the converted value has fewer characters than the field width, it will be padded with spaces
	on the left (or right, if the left-adjustment flag has been given).  Instead of a decimal digit
	string one may write  "*"  or  "*m$" (for  some  decimal integer m) to specify that the field width
	is given in the next argument, or in the m-th argument, respectively, which must be of type int.  A
    negative field width is taken as a '-' flag followed by a positive field width.  In no case does a
	nonexistent or small field width cause truncation of  a  field; if the result of a conversion is wider
	than the field width, the field is expanded to contain the conversion result.

Precision ('.'):
	An optional precision, in the form of a period ('.')  followed by an optional decimal digit string.
	Instead of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify
	that the precision is given in the next argument, or in the m-th argument, respectively, which must be
	of type int.  If the precision is given as just '.', the precision is taken to be zero.  A negative
	precision is taken as if the precision were omitted.  This gives the minimum number of digits to appear
	for d, i, o, u, x, and X conversions, the number of digits to appear after the radix character
	for a, A, e, E, f, and F conversions, the maximum number of significant digits for g and G conversions,
	or the maximum number of characters to be printed from a string for s and S conversions.

-------------------------------------------------------------------------------------------------------------------------------------------

What needs to be done for every case:
Flags
'#' Prepend '0x' at the beggining of %x and %X if they are not 0.

' ' Add a space before %d and %i if they are positive or 0.

'+' Add a + sign before %d and %i if they are positive or 0. '+' overrides ' ' when used together.
-------
'-' Add spaces on the right side until it reaches specified width. If no width specified don't add spaces.
	If converted value width is bigger or equal to specified field width, don't truncate.
	'-' overrides '0' when used together. For ALL conversions.

'0' Add 0 on the left side until it reaches specified width. If no width specified don't add 0.
	If converted value width is bigger or equal to specified field width, don't truncate.
	'0' flag is ignored when used with '-' flag. For %d %i %u %x %X conversions.
-------
Minimum Field Width
An optional non zero decimal digit string after the flags that indicates the minimum string width.
If the converted value has fewer characters than the field width, it will be padded with spaces
on the left (or right, if the left-adjustment flag has been given).
-------
Precision
'.' To indicate the minimum number of digits to appear for %i %d %u %x %X conversions or the maximum number of characters
to be printed from a string for %s conversions.
An optional decimal digit string in the following formats (e.g. int with precision 10): %.10i or %.*i, precision(int), int
that indicates the minimum number of digits to appear. Left adding zeros if precision > conversion.
If just '.' is given the precision is taken to be 0.
If the precision is less than the number length, the precision is taken to be 0.
If a negative precision is given, precision is omitted.
If precision is 0 and the number to print is 0, print nothing.
'0' flag is ignored with precision.

-------
Expected behaviour between flags, precision and width:

- ' ' and sign ('-' or '+') are part of width characters.

- ' ' and sign ('-' or '+') are not part of precision characters.

- Precision characters are part of width characters.

-------
Flags to handle for every conversion:
- ALL: Field Width, '-'

- %s: '.'

- %d %i: ' ', '+', '0', '.'

- %x %X: '#', '0', '.'

- %u: '0', '.'

-------

Combinations and behaviour:
'#' and '-'
'#' and '0'

' ' and '-'
' ' and '0'

'+' and '-'
'+' and '0'


man pages of interest:
man 3 printf
